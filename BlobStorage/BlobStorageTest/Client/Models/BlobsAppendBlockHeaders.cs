// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BlobStorageTest.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;
    using System.Xml;
    using System.Xml.Linq;

    /// <summary>
    /// Defines headers for AppendBlock operation.
    /// </summary>
    public partial class BlobsAppendBlockHeaders
    {
        /// <summary>
        /// Initializes a new instance of the BlobsAppendBlockHeaders class.
        /// </summary>
        public BlobsAppendBlockHeaders()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlobsAppendBlockHeaders class.
        /// </summary>
        /// <param name="eTag">The ETag contains a value that you can use to
        /// perform operations conditionally. If the request version is
        /// 2011-08-18 or newer, the ETag value will be in quotes.</param>
        /// <param name="lastModified">Returns the date and time the container
        /// was last modified. Any operation that modifies the blob, including
        /// an update of the blob's metadata or properties, changes the
        /// last-modified time of the blob.</param>
        /// <param name="contentMD5">If the blob has an MD5 hash and this
        /// operation is to read the full blob, this response header is
        /// returned so that the client can check for message content
        /// integrity.</param>
        /// <param name="requestId">This header uniquely identifies the request
        /// that was made and can be used for troubleshooting the
        /// request.</param>
        /// <param name="version">Indicates the version of the Blob service
        /// used to execute the request. This header is returned for requests
        /// made against version 2009-09-19 and above.</param>
        /// <param name="date">UTC date/time value generated by the service
        /// that indicates the time at which the response was initiated</param>
        /// <param name="blobAppendOffset">This response header is returned
        /// only for append operations. It returns the offset at which the
        /// block was committed, in bytes.</param>
        /// <param name="blobCommittedBlockCount">The number of committed
        /// blocks present in the blob. This header is returned only for append
        /// blobs.</param>
        public BlobsAppendBlockHeaders(string eTag = default(string), string lastModified = default(string), string contentMD5 = default(string), string requestId = default(string), string version = default(string), System.DateTime? date = default(System.DateTime?), string blobAppendOffset = default(string), string blobCommittedBlockCount = default(string))
        {
            ETag = eTag;
            LastModified = lastModified;
            ContentMD5 = contentMD5;
            RequestId = requestId;
            Version = version;
            Date = date;
            BlobAppendOffset = blobAppendOffset;
            BlobCommittedBlockCount = blobCommittedBlockCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ETag contains a value that you can use to perform
        /// operations conditionally. If the request version is 2011-08-18 or
        /// newer, the ETag value will be in quotes.
        /// </summary>
        [JsonProperty(PropertyName = "ETag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets returns the date and time the container was last
        /// modified. Any operation that modifies the blob, including an update
        /// of the blob's metadata or properties, changes the last-modified
        /// time of the blob.
        /// </summary>
        [JsonProperty(PropertyName = "Last-Modified")]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or sets if the blob has an MD5 hash and this operation is to
        /// read the full blob, this response header is returned so that the
        /// client can check for message content integrity.
        /// </summary>
        [JsonProperty(PropertyName = "Content-MD5")]
        public string ContentMD5 { get; set; }

        /// <summary>
        /// Gets or sets this header uniquely identifies the request that was
        /// made and can be used for troubleshooting the request.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-request-id")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or sets indicates the version of the Blob service used to
        /// execute the request. This header is returned for requests made
        /// against version 2009-09-19 and above.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets UTC date/time value generated by the service that
        /// indicates the time at which the response was initiated
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "Date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Gets or sets this response header is returned only for append
        /// operations. It returns the offset at which the block was committed,
        /// in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-blob-append-offset")]
        public string BlobAppendOffset { get; set; }

        /// <summary>
        /// Gets or sets the number of committed blocks present in the blob.
        /// This header is returned only for append blobs.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-blob-committed-block-count")]
        public string BlobCommittedBlockCount { get; set; }

        /// <summary>
        /// Serializes the object to an XML node
        /// </summary>
        internal XElement XmlSerialize(XElement result)
        {
            if( null != ETag )
            {
                result.Add(new XElement("ETag", ETag) );
            }
            if( null != LastModified )
            {
                result.Add(new XElement("Last-Modified", LastModified) );
            }
            if( null != ContentMD5 )
            {
                result.Add(new XElement("Content-MD5", ContentMD5) );
            }
            if( null != RequestId )
            {
                result.Add(new XElement("x-ms-request-id", RequestId) );
            }
            if( null != Version )
            {
                result.Add(new XElement("x-ms-version", Version) );
            }
            if( null != Date )
            {
                result.Add(new XElement("Date", Date?.ToUniversalTime().ToString("R")) );
            }
            if( null != BlobAppendOffset )
            {
                result.Add(new XElement("x-ms-blob-append-offset", BlobAppendOffset) );
            }
            if( null != BlobCommittedBlockCount )
            {
                result.Add(new XElement("x-ms-blob-committed-block-count", BlobCommittedBlockCount) );
            }
            return result;
        }
        /// <summary>
        /// Deserializes an XML node to an instance of BlobsAppendBlockHeaders
        /// </summary>
        internal static BlobsAppendBlockHeaders XmlDeserialize(string payload)
        {
            // deserialize to xml and use the overload to do the work
            return XmlDeserialize( XElement.Parse( payload ) );
        }
        internal static BlobsAppendBlockHeaders XmlDeserialize(XElement payload)
        {
            var result = new BlobsAppendBlockHeaders();
            var deserializeETag = XmlSerialization.ToDeserializer(e => (string)e);
            string resultETag;
            if (deserializeETag(payload, "ETag", out resultETag))
            {
                result.ETag = resultETag;
            }
            var deserializeLastModified = XmlSerialization.ToDeserializer(e => (string)e);
            string resultLastModified;
            if (deserializeLastModified(payload, "Last-Modified", out resultLastModified))
            {
                result.LastModified = resultLastModified;
            }
            var deserializeContentMD5 = XmlSerialization.ToDeserializer(e => (string)e);
            string resultContentMD5;
            if (deserializeContentMD5(payload, "Content-MD5", out resultContentMD5))
            {
                result.ContentMD5 = resultContentMD5;
            }
            var deserializeRequestId = XmlSerialization.ToDeserializer(e => (string)e);
            string resultRequestId;
            if (deserializeRequestId(payload, "x-ms-request-id", out resultRequestId))
            {
                result.RequestId = resultRequestId;
            }
            var deserializeVersion = XmlSerialization.ToDeserializer(e => (string)e);
            string resultVersion;
            if (deserializeVersion(payload, "x-ms-version", out resultVersion))
            {
                result.Version = resultVersion;
            }
            var deserializeDate = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultDate;
            if (deserializeDate(payload, "Date", out resultDate))
            {
                result.Date = resultDate;
            }
            var deserializeBlobAppendOffset = XmlSerialization.ToDeserializer(e => (string)e);
            string resultBlobAppendOffset;
            if (deserializeBlobAppendOffset(payload, "x-ms-blob-append-offset", out resultBlobAppendOffset))
            {
                result.BlobAppendOffset = resultBlobAppendOffset;
            }
            var deserializeBlobCommittedBlockCount = XmlSerialization.ToDeserializer(e => (string)e);
            string resultBlobCommittedBlockCount;
            if (deserializeBlobCommittedBlockCount(payload, "x-ms-blob-committed-block-count", out resultBlobCommittedBlockCount))
            {
                result.BlobCommittedBlockCount = resultBlobCommittedBlockCount;
            }
            return result;
        }
    }
}
